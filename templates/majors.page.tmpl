{{template "base" .}}
{{define "css"}}
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />
{{end}}
{{define "content"}}
<div class="container">
    <div class="row">
        <div class="col text-center">
            <h1 class="mt-4">This is Major's Suite Page</h1>
            <p>Add captions to your slides easily with the .carousel-caption element within any .carousel-item. They can be easily hidden on smaller viewports, as shown below, with optional display utilities. We hide them initially with .d-none and bring them back on medium-sized devices with .d-md-block.</p>
        </div>
    </div>
    <div class="row">
        <div class="col text-center">
            <a id="check-availability-button" href="#1" class="btn btn-success">Check Availability</a>
        </div>
    </div>
</div>
{{end}}

{{define "js"}}
<script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
<script type="application/javascript" src="https://unpkg.com/notie"></script>
<script type="application/javascript">
    let attention = Prompt()
    let html = `
<form id="check-availability-form" class="needs-validation" method="post" novalidate>
    <div class="row">
        <div class="col">
            <div class="row" id="reservation-dates-modal">
                <div class="col">
                    <input type="text" class="date-picker form-control" name="start" placeholder="Start" id="start" disabled required>
                </div>
                <div class="col">
                    <input type="text" class="date-picker form-control" name="end" placeholder="End" id="end" disabled required>
                </div>
            </div>
        </div>
    </div>
</form>
        `
    document.getElementById("check-availability-button").addEventListener('click', function () {
        attention.custom({
            msg: html,
            title: "Choose your dates",
            callback: (result) => {
                const form = document.getElementById("check-availability-form")
                let formData = new FormData(form)
                formData.append("csrf_token", "{{.CSRFToken}}")
                fetch("search-availability-json", {
                    method: "post",
                    body: formData
                })
                    .then(response => response.json())
                    .then(data => console.log(data))
                    .catch(error => {
                        console.error(error)
                    })
            },
            willOpen: () => {
                $('.date-picker').daterangepicker({
                    singleDatePicker: true,
                    showDropdowns: true,
                    minYear: new Date().getFullYear() - 2,
                    maxYear: new Date().getFullYear() + 10,
                    locale: {
                        format: "Y-MM-DD",
                    }
                });
                window.addEventListener("load", function () {
                    let forms = document.getElementsByClassName("needs-validation")
                    Array.prototype.filter.call(forms, function (form) {
                        form.addEventListener("submit", function (event) {
                            if (form.checkValidity() === false) {
                                event.preventDefault()
                                event.stopPropagation()
                            }
                            form.classList.add("was-validated")
                        }, false)
                    })
                }, false)
            },
            didOpen: () => {
                document.getElementById("start").removeAttribute("disabled")
                document.getElementById("end").removeAttribute("disabled")
            }
        })
    })

    function Prompt() {
        let toast = function (c) {
            const {
                msg = "",
                icon = "success",
                position = "top-end"
            } = c
            const Toast = Swal.mixin({
                toast: true,
                title: msg,
                position: position,
                icon: icon,
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.addEventListener("mouseenter", Swal.stopTimer)
                    toast.addEventListener("mouseleave", Swal.resumeTimer)
                }
            })
            Toast.fire({})
        }
        let success = function (c) {
            const {
                msg = "",
                footer = "",
                title = ""
            } = c
            Swal.fire({
                text: msg,
                title: title,
                icon: "success",
                footer: footer
            })
        }
        let error = function (c) {
            const {
                msg = "",
                footer = "",
                title = ""
            } = c
            Swal.fire({
                text: msg,
                title: title,
                icon: "error",
                footer: footer
            })
        }

        async function custom(c) {
            const {
                msg = "",
                title = ""
            } = c
            const {value: result} = await Swal.fire({
                title: title,
                html: msg,
                backdrop: false,
                focusConfirm: false,
                showCancelButton: true,
                willOpen: () => {
                    if (c.willOpen !== undefined) {
                        c.willOpen()
                    }
                },
                preConfirm: () => {
                    return [
                        document.getElementById("start").value,
                        document.getElementById("end").value
                    ]
                },
                didOpen: () => {
                    if (c.didOpen !== undefined) {
                        c.didOpen()
                    }
                }
            })
            if (c.callback === undefined) {
                return
            }
            if (!result
                || result.dismiss === Swal.DismissReason.cancel
                || result.value === "") {
                c.callback(false)
                return
            }
            c.callback(result)
        }
        return {
            toast: toast,
            success: success,
            error: error,
            custom: custom
        }
    }
</script>
{{end}}